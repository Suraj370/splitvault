// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// =======================
// User Authentication
// =======================
model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String         @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  mainAccounts  MainAccount[]
  refreshTokens RefreshToken[]
}

// =======================
// Main Account
// =======================
model MainAccount {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  balance       Float
  currency      String
  createdAt     DateTime       @default(now())
  userId        String
  user          User           @relation(fields: [userId], references: [id])

  subAccounts   SubAccount[]
  transactions  Transaction[]  @relation("MainAccountTransactions")
}

// =======================
// Sub Account
// =======================
model SubAccount {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  balance       Float
  targetAmount  Float
  scheme        Scheme         // ENUM

  mainAccountId String
  mainAccount   MainAccount    @relation(fields: [mainAccountId], references: [id])
  createdAt     DateTime       @default(now())

  transactions  Transaction[]  @relation("SubAccountTransactions")
}

// =======================
// Transactions
// =======================
model Transaction {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  type           TransactionType
  amount         Float
  description    String
  timestamp      DateTime        @default(now())

  fromAccountId  String?         // For transfers
  toAccountId    String?         // For transfers

  accountId      String          
  accountType    AccountType

  mainAccount    MainAccount?    @relation("MainAccountTransactions", fields: [accountId], references: [id])
  subAccount     SubAccount?     @relation("SubAccountTransactions", fields: [accountId], references: [id])
}

// =======================
// Refresh Token
// =======================
model RefreshToken {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  token      String      @unique
  userId     String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt  DateTime
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

// =======================
// Enums
// =======================
enum TransactionType {
  ALLOCATION
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum AccountType {
  main
  sub
}

enum Scheme {
  emergency
  vacation
  home
  retirement
  investment
  car
  education
  wedding
  health
  others
}
